(self.webpackChunkbakupub=self.webpackChunkbakupub||[]).push([[6908],{3905:function(e,n,t){"use strict";t.d(n,{Zo:function(){return c},kt:function(){return m}});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function p(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=r.createContext({}),s=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):p(p({},n),e)),t},c=function(e){var n=s(e.components);return r.createElement(l.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),d=s(t),m=a,h=d["".concat(l,".").concat(m)]||d[m]||u[m]||o;return t?r.createElement(h,p(p({ref:n},c),{},{components:t})):r.createElement(h,p({ref:n},c))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,p=new Array(o);p[0]=d;var i={};for(var l in n)hasOwnProperty.call(n,l)&&(i[l]=n[l]);i.originalType=e,i.mdxType="string"==typeof e?e:a,p[1]=i;for(var s=2;s<o;s++)p[s]=t[s];return r.createElement.apply(null,p)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},9613:function(e,n,t){"use strict";t.r(n),t.d(n,{frontMatter:function(){return p},metadata:function(){return i},toc:function(){return l},default:function(){return c}});var r=t(2122),a=t(9756),o=(t(7294),t(3905)),p={},i={unversionedId:"se/development/standard/api/graphql",id:"se/development/standard/api/graphql",isDocsHomePage:!1,title:"GraphQL",description:"GraphQL is a query language for APIs - not databases.",source:"@site/i18n/zh/docusaurus-plugin-content-docs/current/se/development/standard/api/graphql.md",sourceDirName:"se/development/standard/api",slug:"/se/development/standard/api/graphql",permalink:"/zh/docs/se/development/standard/api/graphql",version:"current",frontMatter:{},sidebar:"se_development",previous:{title:"jdk",permalink:"/zh/docs/se/development/setup/jdk"},next:{title:"Web Api Standard",permalink:"/zh/docs/se/development/standard/web/api"}},l=[{value:"Concepts",id:"concepts",children:[]},{value:"Flow",id:"flow",children:[]},{value:"architecture",id:"architecture",children:[]}],s={toc:l};function c(e){var n=e.components,p=(0,a.Z)(e,["components"]);return(0,o.kt)("wrapper",(0,r.Z)({},s,p,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"GraphQL is a query language for APIs - not databases."),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"GraphQl",src:t(4274).Z})),(0,o.kt)("h2",{id:"concepts"},"Concepts"),(0,o.kt)("p",null,"The Schema Definition Language (SDL)"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Schema"),(0,o.kt)("li",{parentName:"ul"},"Query"),(0,o.kt)("li",{parentName:"ul"},"Mutation",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"creating new data"),(0,o.kt)("li",{parentName:"ul"},"updating existing data"),(0,o.kt)("li",{parentName:"ul"},"eleting existing data"))),(0,o.kt)("li",{parentName:"ul"},"Subscriptions")),(0,o.kt)("h2",{id:"flow"},"Flow"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"define schema--\x3equery <-------+\n            `--\x3emutaion <-----+---\x3eGraphQL(server)\n              `--\x3esubscribe <-+\n")),(0,o.kt)("p",null,"define schema"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"//DataType\ntype Person {\n  name: String!\n  age: Int!\n  posts: [Post!]!\n}\ntype Post {\n  title: String!\n  author: Person!\n}\n\n//Pntry Point\ntype Query {\n  allPersons(last: Int): [Person!]!\n}\ntype Mutation {\n  createPerson(name: String!, age: Int!): Person!\n}\ntype Subscription {\n  newPerson: Person!\n}\n")),(0,o.kt)("p",null,"query"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"{\n  allPersons {\n    name\n    age\n  }\n}\n")),(0,o.kt)("p",null,"query with arguements"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"{\n  allPersons(last: 2) {\n    name\n  }\n}\n")),(0,o.kt)("p",null,"writing data with mutations"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'mutation {\n  createPerson(name: "Alice", age: 36) {\n    id\n  }\n}\n')),(0,o.kt)("p",null,"realtime updates with subscriptions"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"subscription {\n  newPerson {\n    name\n    age\n  }\n}\n")),(0,o.kt)("h2",{id:"architecture"},"architecture"),(0,o.kt)("p",null,"GraphQL server with a connected database"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"Client---\x3e[GraphQL[Database]\n")),(0,o.kt)("p",null,"GraphQL server that is a thin layer in front of a number of third party or legacy systems and integrates them through a single GraphQL API"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"                   >microservice\n                  /\nclient<---\x3eGraphQL<--\x3elegacy system\n                  \\\n                   >Third-pary api\n")),(0,o.kt)("p",null,"A hybrid approach of a connected database and third party or legacy systems that can all be accessed through the same GraphQL API"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"                               >legacy system/microservice\n                              /\nClient<---\x3e[GraphQL[Database]<\n                              \\\n                               >Third-pary api\n")))}c.isMDXComponent=!0},4274:function(e,n,t){"use strict";n.Z=t.p+"assets/images/GraphQL-3be14de488a56847878186b7c19fea69.png"}}]);