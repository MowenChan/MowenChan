(self.webpackChunkbakupub=self.webpackChunkbakupub||[]).push([[2377],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return c},kt:function(){return m}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),u=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},c=function(e){var t=u(e.components);return a.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),d=u(n),m=r,h=d["".concat(s,".").concat(m)]||d[m]||p[m]||i;return n?a.createElement(h,l(l({ref:t},c),{},{components:n})):a.createElement(h,l({ref:t},c))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,l=new Array(i);l[0]=d;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:r,l[1]=o;for(var u=2;u<i;u++)l[u]=n[u];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},9465:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return l},metadata:function(){return o},toc:function(){return s},default:function(){return c}});var a=n(2122),r=n(9756),i=(n(7294),n(3905)),l={},o={unversionedId:"se/development/standard/web/api",id:"se/development/standard/web/api",isDocsHomePage:!1,title:"Web Api Standard",description:"`",source:"@site/docs/se/development/standard/web/api.md",sourceDirName:"se/development/standard/web",slug:"/se/development/standard/web/api",permalink:"/docs/se/development/standard/web/api",version:"current",frontMatter:{},sidebar:"se_development",previous:{title:"GraphQL",permalink:"/docs/se/development/standard/api/graphql"}},s=[{value:"REST",id:"rest",children:[{value:"drawback",id:"drawback",children:[]}]},{value:"GraphQL",id:"graphql",children:[{value:"advantage",id:"advantage",children:[]},{value:"The Schema Definition Language (SDL)",id:"the-schema-definition-language-sdl",children:[]}]}],u={toc:s};function c(e){var t=e.components,l=(0,r.Z)(e,["components"]);return(0,i.kt)("wrapper",(0,a.Z)({},u,l,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"APIs have become ubiquitous components of software infrastructures. In short, an API defines how a client can load data from a server.\n")),(0,i.kt)("h2",{id:"rest"},"REST"),(0,i.kt)("h3",{id:"drawback"},"drawback"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Overfetching: Downloading superfluous data",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Overfetching means that a client downloads more information than is actually required in the app."))),(0,i.kt)("li",{parentName:"ul"},"Underfetching and the n+1 problem",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Underfetching generally means that a specific endpoint doesn\u2019t provide enough of the required information. The client will have to make additional(n+1) requests to fetch everything it needs.")))),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"xxx",src:n(9734).Z})),(0,i.kt)("h2",{id:"graphql"},"GraphQL"),(0,i.kt)("h3",{id:"advantage"},"advantage"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Rapid Product Iterations on the Frontend",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Since clients can specify their exact data requirements, no backend engineer needs to make adjustments when the design and data needs on the frontend change."))),(0,i.kt)("li",{parentName:"ul"},"Insightful Analytics on the Backend",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"GraphQL allows you to have fine-grained insights about the data that\u2019s requested on the backend. As each client specifies exactly what information it\u2019s interested in, it is possible to gain a deep understanding of how the available data is being used."))),(0,i.kt)("li",{parentName:"ul"},"Benefits of a Schema & Type System",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"GraphQL uses a strong type system to define the capabilities of an API. All the types that are exposed in an API are written down in a schema using the GraphQL Schema Definition Language (SDL). This schema serves as the contract between the client and the server to define how a client can access the data.")))),(0,i.kt)("h3",{id:"the-schema-definition-language-sdl"},"The Schema Definition Language (SDL)"),(0,i.kt)("p",null,"GraphQL has its own type system that\u2019s used to define the schema of an API. The syntax for writing schemas is called Schema Definition Language (SDL)."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"define Schema")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"type Post{\n  title: String!\n  author: Persion!\n}\ntype Person {\n  name: String!\n  age: Int!\n  posts: [Post!]!\n}\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"query data")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"{\n  allPersons {\n    name\n  }\n}\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"response")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "allPersons": [\n    { "name": "Johnny" },\n    { "name": "Sarah" },\n    { "name": "Alice" }\n  ]\n}\n')),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Queries with Arguments")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"{\n  allPersons(last: 2) {\n    name\n  }\n}\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Writing Data with Mutations"),(0,i.kt)("li",{parentName:"ul"},"Realtime Updates with Subscriptions\n",(0,i.kt)("img",{alt:"xxx",src:n(468).Z}),"\nGraphQL is a query language for APIs - not databases.")))}c.isMDXComponent=!0},468:function(e,t,n){"use strict";t.Z=n.p+"assets/images/GraphQL-3be14de488a56847878186b7c19fea69.png"},9734:function(e,t,n){"use strict";t.Z=n.p+"assets/images/REST-c803d348ef06147963eece836206200d.png"}}]);